name: Deploy App

on:
    push:
      branches:
        - develop
        - qa
        - 'feature/**'
      tags:
        - v**

permissions:
    id-token: write
    contents: read
    checks: write
    issues: read
    packages: read
    pull-requests: write


env:
    ACR_SERVER: '${{ secrets.ACR_NAME }}.azurecr.io'
    ACR_REPOSITORY: 'aesdk'
      


jobs:
    detectenv:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Detecting environment
              id: get_env
              run: |
                echo "Running on ${{ github.ref }}"
                echo "env_isFeature=false" >> $GITHUB_OUTPUT
                if [ "${{ github.ref_type }}" = "tag" ]; then
                  echo "env_name=production" >> $GITHUB_OUTPUT
                  echo "env_suffix=p" >> $GITHUB_OUTPUT
                elif [ "${{ github.ref }}" = "refs/heads/qa" ]; then
                  echo "env_name=test" >> $GITHUB_OUTPUT
                  echo "env_suffix=t" >> $GITHUB_OUTPUT
                elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
                  echo "env_name=development" >> $GITHUB_OUTPUT
                  echo "env_suffix=d" >> $GITHUB_OUTPUT
                else
                  echo "env_name=development" >> $GITHUB_OUTPUT
                  echo "env_suffix=d" >> $GITHUB_OUTPUT
                  echo "env_isFeature=true" >> $GITHUB_OUTPUT
                fi
        outputs:
            env_name: ${{ steps.get_env.outputs.env_name }}
            env_suffix: ${{ steps.get_env.outputs.env_suffix }}
            env_isFeature: ${{ steps.get_env.outputs.env_isFeature }}

    snyk:
        needs: [detectenv]
        runs-on: ubuntu-latest
        environment:
            name: ${{ needs.detectenv.outputs.env_name }}
        env:
            AZURE_DEVOPS_KV_COMMON_NAME: 'kv-devops-${{ needs.detectenv.outputs.env_suffix }}'
        steps:
            - uses: actions/checkout@v4
    
            - uses: snyk/actions/setup@master
    
            - name: Log in with Azure
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

            - name: Run snyk tests
              run: |
                dotnet nuget add source --username USERNAME --password ${{ secrets.GH_PACKAGE_READ_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/equinor/index.json"
                dotnet restore "src/IIoT.AE.Api/IIoT.AE.Api.csproj"
    
                snyk auth $(az keyvault secret show --name snyk-token --vault-name ${{ env.AZURE_DEVOPS_KV_COMMON_NAME }} --query value --output tsv)
                snyk test --all-projects --severity-threshold=high
                snyk code test --all-projects --severity-threshold=high
                if [ "${{ needs.detectenv.outputs.env_isFeature }}" = "false" ]; then
                snyk monitor --all-projects --severity-threshold=high --project-tags=application=ae,environment=${{ needs.detectenv.outputs.env_name }}
                    fi
    
    docker:
        needs: [detectenv]
        runs-on: ubuntu-latest
        environment:
            name: ${{ needs.detectenv.outputs.env_name }}
        env:
            AZURE_DEVOPS_KV_COMMON_NAME: 'kv-devops-${{ needs.detectenv.outputs.env_suffix }}'
        steps:
            - uses: actions/checkout@v4
              with:
                lfs: true
    
            - uses: snyk/actions/setup@master
    
            - name: Log in with Azure
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
            - name: Docker Test, Build and Push
              run: |
                export DOCKER_BUILDKIT=1
                echo ${{ secrets.GH_PACKAGE_READ_TOKEN }} >> pat
    
                docker build --secret id=pat,src=./pat -f "src/omnia_ae/Dockerfile" --target test -t "omnia-ae-python-tests:${{github.sha}}" .
                mkdir "${{github.workspace}}/testresults"
                docker run -i --name testcontainer \
                -v "${{github.workspace}}/testresults:/src/tests/IIoT.AE.Api.Tests/TestResults" \
                "iiot-ae-api-tests:${{github.sha}}"
                docker rm -fv testcontainer
    
                docker build --secret id=pat,src=./pat -f "src/IIoT.AE.Api/Dockerfile" -t "${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}" .
    
                snyk auth $(az keyvault secret show --name snyk-token --vault-name ${{ env.AZURE_DEVOPS_KV_COMMON_NAME }} --query value --output tsv)
                snyk container test "${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}" --severity-threshold=high --exclude-base-image-vulns
    
                if [ "${{ needs.detectenv.outputs.env_isFeature }}" = "false" ]; then
                snyk container monitor "${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}" --severity-threshold=high --exclude-base-image-vulns --project-tags=application=ae,environment=${{ needs.detectenv.outputs.env_name }}
                az acr login --name ${{ secrets.ACR_NAME }}
                docker push "${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}"
                fi
    
            - name: Publish test results
              uses: EnricoMi/publish-unit-test-result-action@v2
              if: always()
              with:
                check_name: Unit test results
                files: ${{ github.workspace }}/testresults/**/*.trx

    deploy:
        needs: [detectenv, snyk, docker]
        if: needs.detectenv.outputs.env_isFeature == 'false'
        runs-on: ubuntu-latest
        environment:
            name: ${{ needs.detectenv.outputs.env_name }}
        env:
            AZURE_DEVOPS_KV_COMMON_NAME: 'kv-devops-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_RG: '${{ secrets.AZURE_RESOURCEGROUP }}-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_APP_FULL_NAME: 'app-${{ secrets.AZURE_APP_NAME }}-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_APP_SLOT_NAME : 'staging'
        steps:
            - name: Log in with Azure
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
            - name: Update appsettings
              uses: azure/CLI@v1
              with:
                inlineScript: |
                  az webapp config container set \
                  -g ${{ env.AZURE_RG }} \
                  -n ${{ env.AZURE_APP_FULL_NAME }} \
                  -s ${{ env.AZURE_APP_SLOT_NAME }} \
                  --docker-custom-image-name ${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}
    
                  az webapp config appsettings set \
                  -g ${{ env.AZURE_RG }} \
                  -n ${{ env.AZURE_APP_FULL_NAME }} \
                  -s ${{ env.AZURE_APP_SLOT_NAME }} \
                  --settings DOCKER_CUSTOM_IMAGE_NAME=${{ env.ACR_SERVER }}/${{ env.ACR_REPOSITORY }}:${{ github.sha }}
    
            - name: Start slot
              uses: azure/CLI@v1
              with:
                inlineScript: |
                  az webapp start \
                  -g ${{ env.AZURE_RG }} \
                  -n ${{ env.AZURE_APP_FULL_NAME }} \
                  -s ${{ env.AZURE_APP_SLOT_NAME }}

    swap:
        needs: [detectenv, deploy]
        if: needs.detectenv.outputs.env_suffix == 'd'
        runs-on: ubuntu-latest
        environment:
            name: ${{ needs.detectenv.outputs.env_name }}
        env:
            AZURE_DEVOPS_KV_COMMON_NAME: 'kv-devops-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_RG: '${{ secrets.AZURE_RESOURCEGROUP }}-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_APP_FULL_NAME: 'app-${{ secrets.AZURE_APP_NAME }}-${{ needs.detectenv.outputs.env_suffix }}'
            AZURE_APP_SLOT_NAME : 'staging'
        steps:
            - name: Log in with Azure
              uses: azure/login@v1
              with:
                client-id: ${{ secrets.AZURE_CLIENT_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            - name: Swap slots
              uses: azure/CLI@v1
              with:
                inlineScript: |
                  az webapp deployment slot swap \
                  -g ${{ env.AZURE_RG }} \
                  -n ${{ env.AZURE_APP_FULL_NAME }} \
                  -s ${{ env.AZURE_APP_SLOT_NAME }}

            - name: Stop slot
              uses: azure/CLI@v1
              with:
                inlineScript: |
                  az webapp stop \
                  -g ${{ env.AZURE_RG }} \
                  -n ${{ env.AZURE_APP_FULL_NAME }} \
                  -s ${{ env.AZURE_APP_SLOT_NAME }}